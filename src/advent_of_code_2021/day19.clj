(ns advent-of-code-2021.day19)

(defn vector-for-2d [[v1x v1y] [v2x v2y]]
  [(- v1x v2x)
   (- v1y v2y)])

(def orientation-correction-2d [[1 1]
                                [-1 1]
                                [1 -1]
                                [-1 -1]])

(defn number-of-matches-2d [[vx vy] pairs-a pairs-b]
  (let [new-a (map
               (fn [[xc yc]]
                 (let [xv (* xc vx)
                       yv (* yc vy)]
                   (map (fn [[xb yb]]
                          [(- xb xv) (- yb yv)])
                        pairs-a)))
               orientation-correction-2d)
        _ (println new-a)]
    (apply max (map #(count (clojure.set/intersection (set pairs-b) (set %)))
              new-a))))

(defn find-vector-2d [pairs-a pairs-b]
  (let [possible-vectors (for [b pairs-b]
                           (vector-for-2d (first pairs-a) b))
        matches (map (fn [v]
                       [(number-of-matches-2d v pairs-a pairs-b)
                        v])
                     possible-vectors)]
    matches))

(def input-2d {0 [[0 2]
                  [4 1]
                  [3 3]]
               1 [[-1 -1]
                  [-5 0]
                  [-2 1]]})

(def input-2d-orientation-chagned  {0 [[0 2]
                                       [4 1]
                                       [3 3]]
                                    1 [[-1 1]
                                       [5 0]
                                       [2 1]]})






(def orientation-correction-3d [[ 1  1  1]
                                [ 1  1 -1]
                                [ 1 -1  1]
                                [ 1 -1 -1]
                                [-1  1  1]
                                [-1  1 -1]
                                [-1 -1  1]
                                [-1 -1 -1]])

;; (defn vectors-for-3d [[v1x v1y v1z] [v2x v2y v2z]]
;;   (map (fn [[x y z]]
;;          [(- v1x (* v2x x))
;;           (- v1y (* v2y y))
;;           (- v1z (* v2z z))])
;;        orientation-correction-3d))

(defn create-transformation-functions [x y z]
  (for [[ox oy oz] orientation-correction-3d
        [a b c] (remove nil?
                        (for [a [x y z]
                              b [x y z]
                              c [x y z]]
                          (if (and (not= a b)
                                   (not= b c)
                                   (not= c a))
                            [a b c])))]
    (fn [x y z]
      [(* ox a)
       (* oy b)
       (* oz c)])))

(defn vectors-for-3d [[v1x v1y v1z] [v2x v2y v2z]]
  (let [vvvv ]
    (map (fn [[x y z]]
           [(- v1x x)
            (- v1y y)
            (- v1z z)])
         vvvv)))

;;[-618,-824,-621] - [68,-1246,-43] * [-1 1 -1] = [686,422,578]

(defn number-of-matches-3d [[vx vy vz] pairs-a pairs-b]
  (let [new-a (map
               (fn [[xc yc zc]]
                 [[xc yc zc]
                  (map (fn [[xa ya za]]
                         [(* (- xa vx) xc)
                          (* (- ya vy) yc)
                          (* (- za vz) zc)])
                       pairs-a)])
               orientation-correction-3d)

        _ :a #_(println new-a)]
    (first (reverse (sort-by first (map #(vector (count (clojure.set/intersection (set pairs-b)
                                                                                  (set (second %))))
                                                 (first %))
                                        new-a))))))

(defn find-vector-3d [pairs-a pairs-b]
  (let [possible-vectors   (reduce into (for [b pairs-b]
                                          (vectors-for-3d (first pairs-a) b)))
        matches (map (fn [v]
                       (conj (number-of-matches-3d v pairs-a pairs-b)
                             v))
                     possible-vectors)]
    (first (reverse (sort-by first matches)))))







(def input-3d {0 [[0 2 0]
                  [4 1 0]
                  [3 3 0]]
               1 [[-1 -1 1]
                  [-5 0 1]
                  [-2 1 1]]})

(def input-3d-orientation-chagned  {0 [[0 2]
                                       [4 1]
                                       [3 3]]
                                    1 [[-1 1]
                                       [5 0]
                                       [2 1]]})

(def medium-test {0 [
[-618,-824,-621]
[-537,-823,-458]
[-447,-329,318]
[404,-588,-901]
[544,-627,-890]
[528,-643,409]
[-661,-816,-575]
[390,-675,-793]
[423,-701,434]
[-345,-311,381]
[459,-707,401]
[-485,-357,347]
]
                  1 [
[686,422,578]
[605,423,415]
[515,917,-361]
[-336,658,858]
[-476,619,847]
[-460,603,-452]
[729,430,532]
[-322,571,750]
[-355,545,-477]
[413,935,-424]
[-391,539,-444]
[553,889,-390]
                  ]})

(def bigger-test {0 [
[404,-588,-901]
[528,-643,409]
[-838,591,734]
[390,-675,-793]
[-537,-823,-458]
[-485,-357,347]
[-345,-311,381]
[-661,-816,-575]
[-876,649,763]
[-618,-824,-621]
[553,345,-567]
[474,580,667]
[-447,-329,318]
[-584,868,-557]
[544,-627,-890]
[564,392,-477]
[455,729,728]
[-892,524,684]
[-689,845,-530]
[423,-701,434]
[7,-33,-71]
[630,319,-379]
[443,580,662]
[-789,900,-551]
[459,-707,401]
]
1 [
[686,422,578]
[605,423,415]
[515,917,-361]
[-336,658,858]
[95,138,22]
[-476,619,847]
[-340,-569,-846]
[567,-361,727]
[-460,603,-452]
[669,-402,600]
[729,430,532]
[-500,-761,534]
[-322,571,750]
[-466,-666,-811]
[-429,-592,574]
[-355,545,-477]
[703,-491,-529]
[-328,-685,520]
[413,935,-424]
[-391,539,-444]
[586,-435,557]
[-364,-763,-893]
[807,-499,-711]
[755,-354,-619]
[553,889,-390]
]
2 [
[649,640,665]
[682,-795,504]
[-784,533,-524]
[-644,584,-595]
[-588,-843,648]
[-30,6,44]
[-674,560,763]
[500,723,-460]
[609,671,-379]
[-555,-800,653]
[-675,-892,-343]
[697,-426,-610]
[578,704,681]
[493,664,-388]
[-671,-858,530]
[-667,343,800]
[571,-461,-707]
[-138,-166,112]
[-889,563,-600]
[646,-828,498]
[640,759,510]
[-630,509,768]
[-681,-892,-333]
[673,-379,-804]
[-742,-814,-386]
[577,-820,562]
] 3 [
[-589,542,597]
[605,-692,669]
[-500,565,-823]
[-660,373,557]
[-458,-679,-417]
[-488,449,543]
[-626,468,-788]
[338,-750,-386]
[528,-832,-391]
[562,-778,733]
[-938,-730,414]
[543,643,-506]
[-524,371,-870]
[407,773,750]
[-104,29,83]
[378,-903,-323]
[-778,-728,485]
[426,699,580]
[-438,-605,-362]
[-469,-447,-387]
[509,732,623]
[647,635,-688]
[-868,-804,481]
[614,-800,639]
[595,780,-596]
] 4 [
[727,592,562]
[-293,-554,779]
[441,611,-461]
[-714,465,-776]
[-743,427,-804]
[-660,-479,-426]
[832,-632,460]
[927,-485,-438]
[408,393,-506]
[466,436,-512]
[110,16,151]
[-258,-428,682]
[-393,719,612]
[-211,-452,876]
[808,-476,-593]
[-575,615,604]
[-485,667,467]
[-680,325,-822]
[-627,-443,-432]
[872,-547,-609]
[833,512,582]
[807,604,487]
[839,-516,451]
[891,-625,532]
[-652,-548,-490]
[30,-46,-14]
]})